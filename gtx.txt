



class Sort:

        #Function for Bubble Sort


        def Insertion(self,array):

            for i in range(1, len(array)):
                key = array[i]
                j=i-1
                while j>=0 and key<array[j]:
                    array[j+1]=array[j]
                    j-=1
                array[j+1] = key
            return array










        def Bubble(self,llister):

            for i in range(len(llister)-1,0,-1):


                for j in range(i):

                    if llister[j]>llister[j+1]:


                        llister[j],llister[j+1]= llister[j+1],llister[j]

            return llister

        def Merge(self,llisterr):

            #function for merge sort
            if len(llisterr) > 1:
                mid = len(llisterr)//2
                left = llisterr[:mid]
                right = llisterr[mid:]

                Merge(left)
                Merge(right)
                i=j=k=0

                while i < len(left) and j < len(right):
                    if left[i] < right[i]:
                        llisterr[k] = left[i]
                        i+=1
                    else:
                        llisterr[k]= right[j]
                        j+=1
                    k+=1
                while i < len(left):
                    llisterr[k] = left[i]
                    i += 1
                    k += 1
                while j < len(right):
                    llisterr[k] = right[j]
                    j += 1
                    k += 1
                return llisterr


        #Function for quick sort
        def partition(self,arr, low , high):
            i = (low-1)
            pivot = arr[high]

            for j in range(low , high ):
                if arr[j]   < pivot :
                    i +=1
                    arr[i],arr[j] = arr[j],arr[i]
            arr[i+1],arr[high] = arr[high],arr[i+1]
            return (i+1)

        def QuickSort(self,arr, low, high):
            if low < high:
                pi = self.partition(arr,low,high)
                self.QuickSort(arr,low, pi-1)
                self.QuickSort(arr, pi+1, high)
















if __name__=='__main__':

    obj = Sort()
    bubbl = [1,7,3,15,11,25,2]

    print("Before bubble sort : ",bubbl)
    obj.Bubble(bubbl)
    print("After bubble sort : ",bubbl)

    llist= [2,5,3,15,10,13,1]

    print("Before merge sort : ",llist)
    variable = obj.Bubble(llist)
    print("After merge sort : ",variable)
    arr = [10, 7, 8, 9, 1, 5]
    print("Before quick sort : ",arr )


    n = len(arr)

    obj.QuickSort(arr, 0 , n-1)
    print("After quick sort :",arr)
    array = [4, 3, 2, 10, 12, 1, 5, 6]
    print("Before Insertion sort : ", array)
    varble = obj.Insertion(array)
    print("After Insertion sort: ", varble)


